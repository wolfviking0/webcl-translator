// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.

__kernel void kernelStep( __global float4 *posArray,
					__global float4 *colorArray,
					__global float *lifetimeArray,
					float4 baseColor,					
					float4 par,
					float4 rayOrigin,
					float4 rayDir,
					float time,
					float deltaTime ) 	
{
	int gid = get_global_id(0);
	
	float4 pos = posArray[gid];

	const float lifetime = 30.;	
	
	lifetimeArray[gid] -= deltaTime;	
	if ( lifetimeArray[gid] < 0 )
	{
		lifetimeArray[gid] = lifetime;							
		float r = 0.005*(((float)gid)/10000.+100.);		
		int num = gid%10000;
		float phi = 0.02*3.14159*(gid%100);
		num = num/100;		
		float theta = 0.01*3.14159*((float)num);
		float sintheta = sin(theta);
		float4 offset = (float4)(r*sintheta*cos(phi),r*sintheta*sin(phi),r*cos(theta),0.0); 
		pos = rayOrigin+100.0f*rayDir+0.2f*offset;										
	}		
	 	
	float4 vel = (float4)(par.x*(pos.y-pos.x), pos.x*(par.z-pos.z)-pos.y, pos.y*pos.x-par.y*pos.z, 0);
			
	posArray[gid] = pos + vel*(deltaTime*par.w);
	
	colorArray[gid] = baseColor + 0.1f*fast_normalize(vel);
	
	const float decayTime = 1.0;
	const float birthTime = 1.0;
		
	if ( lifetimeArray[gid] < decayTime )
	{
		colorArray[gid].w *= lifetimeArray[gid]/decayTime;
	}
	else if ( lifetimeArray[gid] > lifetime - birthTime )
	{
		float tmp = (lifetime-lifetimeArray[gid])/birthTime;
		colorArray[gid].w *= 2.0*(1.0-4.0*(tmp-0.5)*(tmp-0.5)) + tmp;
	}
		 
}
// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.

#version 100

precision mediump float;

varying vec2 texCoord;
varying vec4 color;

uniform int task;

uniform sampler2D Texture0;

uniform float windowWidth;
uniform float windowHeight;

float blurPar[3];

vec4 gammaCorrection()
{
    float gamma = 0.1;
    vec4 c = texture2D(Texture0, texCoord);
    float l = (c.r+c.g+c.b)/3.0;
    c.xyz *= pow(l,gamma)/l;
    return c;
}

vec4 blurX()
{
    float step = 1./windowHeight;
    vec4 c = texture2D(Texture0, texCoord) * blurPar[0];
    for( int i = 1; i < 3; i++ )
    {
         c += texture2D( Texture0, texCoord + vec2(0,step*float(i))) * blurPar[i];
         c += texture2D( Texture0, texCoord - vec2(0,step*float(i))) * blurPar[i];
    }
    return c;
}

vec4 blurY()
{
    float step = 1./windowWidth;
    vec4 c = texture2D(Texture0, texCoord) * blurPar[0];
    for( int i = 1; i < 3; i++ )
    {
         c += texture2D( Texture0, texCoord + vec2(step*float(i),0)) * blurPar[i];
         c += texture2D( Texture0, texCoord - vec2(step*float(i),0)) * blurPar[i];
    }
    return c;
}

vec4 render()
{
    return color;
}

void main()
{
    blurPar[0] = 0.6;
    blurPar[1] = 0.15;
    blurPar[2] = 0.05;

    if ( task == 0 )
        gl_FragColor = render();
    else if ( task == 3 )
        gl_FragColor = gammaCorrection();
    else if ( task == 1 )
        gl_FragColor = blurX();
    else if ( task == 2 )
        gl_FragColor = blurY();
}

#if 0

#version 400

layout( location = 0 ) out vec4 FragColor;

in vec2 texCoord;
in vec4 color;

uniform int task;

uniform sampler2D Texture0;

uniform float windowWidth;
uniform float windowHeight;

uniform float blurPar[3] = float[]( /* #, #, */ 0.6, 0.15, 0.05 );

vec4 gammaCorrection()
{
    float gamma = 0.1;
    vec4 c = texture(Texture0, texCoord);
    float l = (c.r+c.g+c.b)/3.0;
    c.xyz *= pow(l,gamma)/l;
    return c;
}

vec4 blurX()
{
    float step = 1./windowHeight;
    vec4 c = blurPar[0]*texture(Texture0, texCoord);
    for( int i = 1; i < 3; i++ )
    {
         c += blurPar[i]*texture( Texture0, texCoord + vec2(0,step*i));
         c += blurPar[i]*texture( Texture0, texCoord - vec2(0,step*i));
    }
    return c;
}

vec4 blurY()
{
    float step = 1./windowWidth;
    vec4 c = blurPar[0]*texture(Texture0, texCoord);
    for( int i = 1; i < 3; i++ )
    {
         c += blurPar[i]*texture( Texture0, texCoord + vec2(step*i,0));
         c += blurPar[i]*texture( Texture0, texCoord - vec2(step*i,0));
    }
    return c;
}

vec4 render()
{
    return color;
}

void main()
{
    if ( task == 0 )
        FragColor = render();
    else if ( task == 3 )
        FragColor = gammaCorrection();
    else if ( task == 1 )
        FragColor = blurX();
    else if ( task == 2 )
        FragColor = blurY();
}

#endif








// Copyright (c) 2013 Andrey Tuganov
//
// The zlib/libpng license
//
// This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.

#version 100

attribute vec4 vertexPos;
attribute vec4 vertexColor;
attribute vec2 vertexTexCoord;

varying vec4 color;
varying vec2 texCoord;

uniform mat4 MVP;

void main()
{    
    texCoord = vertexTexCoord;
    color = vertexColor;
    gl_Position = MVP*vertexPos;    
}

#if 0

#version 400

layout (location = 0) in vec4 vertexPos;
layout (location = 1) in vec4 vertexColor;
layout (location = 2) in vec2 vertexTexCoord;

out vec4 color;
out vec2 texCoord;

uniform mat4 MVP;

void main()
{    
    texCoord = vertexTexCoord;
    color = vertexColor;
    gl_Position = MVP*vertexPos;    
}

#endif

